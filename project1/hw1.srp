# midi.srp
#
# Roger B. Dannenberg
# Jan 2010

require "debug"

midi_note_on_count = 0
midi_note_off_count = 0

midi_status_noteoff = 0x80
midi_status_noteon = 0x90
midi_status_poly_touch = 0xA0
midi_status_control = 0xB0
midi_status_program = 0xC0
midi_status_touch = 0xD0
midi_status_pitchbend = 0xE0
// standard controller numbers
midi_bank_lsb = 32
midi_bank_msb = 0
midi_alloff = 0x7B


def print_midi_device_info(id)
    var info = midi_get_device_info(id)
    print info

midi_initialized = false

# open default MIDI input and output devices. If successful, midi_in and 
# midi_out will be opened as input and output streams. If an open fails
# the stream (midi_in or midi_out) is set to nil and an error message
# is printed.
#
def midi_init(optional latency = 0, optional buffer_size = 256)
    if midi_initialized
        return "midi_init() called, but midi is already initialized"
    var midi_in_id = midi_in_default()
    midi_in = midi_create()
    var err = midi_open_input(midi_in, midi_in_id, buffer_size)
    if err == 0
        print "midi_init opened input device: ";
        print_midi_device_info(midi_in_id)
    else
        display "midi_init error opening input", midi_in_id, err
        print_midi_device_info(midi_in_id)
        midi_in = nil

    var midi_out_id = midi_out_default()
    midi_out = midi_create()
    err = midi_open_output(midi_out, midi_out_id, buffer_size, latency)
    if err == 0
        print "midi_init opened output device: ";
        print_midi_device_info(midi_out_id)
    else
        display "midi_init error opening output", midi_out_id, err
        print_midi_device_info(midi_out_id)
        midi_out = nil
    midi_initialized = true

def midi_finish()
    if midi_in
        midi_close(midi_in)
        midi_in = nil
    if midi_out
        midi_close(midi_out)
        midi_out = nil
    midi_initialized = false


# a simple test of MIDI output
#
def midi_test()
    midi_init(0)
    if not midi_out
        return
    midi_write(midi_out, 0, chr(midi_status_program) + chr(0))
    for i = 60 to 73
        midi_write(midi_out, 0, chr(midi_status_noteon) + chr(i) + chr(100))
        time_sleep(0.150)
        midi_write(midi_out, 0, chr(midi_status_noteon) + chr(i) + chr(0))
    # wait for notes to finish
    time_sleep(0.5)
    midi_finish()

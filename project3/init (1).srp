# Project 2. Scheduling, MIDI, Graphics
# Jacky Liu
# jackyl1
# based on wxmidictrl.
# Features: 
# Start and Stop
# Adjustable Period
# Adjustable Velocity
# Choice between Major, Major7th, minor, dominant for chord and 12 notes 
# Plays 2 chords at the same time.
# Implementation: Chords and Notes are based on a dictionary. 
# The dictionary for chords contains each chord mapped to a list of values that shift the interval.
# The dictionary for notes contains each note mapped to its numerical value in midi.


require "debug"
require "wxserpent"
require "sched"
require "midi-io"
require "prefs"
require "mididevice"
require "slider"

# Chords based on Arpeggiator
CHORDS = {
    "Major" : [0,4,7],
    "Major 7th" : [0,4,7,11],
    "Minor" : [0,3,7],
    "Dominant" : [0,4,7,10]
}
# Notes from 60-72
NOTES = {
    "C" : 60,
    "C#" : 61,
    "D" : 62,
    "D#" : 63,
    "E" : 64,
    "F" : 65,
    "F#" : 66,
    "G" : 67,
    "G#" : 68,
    "A" : 69,
    "A#" : 70,
    "B" : 71
    }

player_id = 0 // use "stopping a thread" pattern



def activity(id, p, note, chord):
    # major = [0,4,7,11]
    note_t = NOTES[note]
    chord_t = CHORDS[chord]

    display "activity", p, sched_rtime, time_get()
    # display "activity2", p, sched_rtime, time_get()

    midi_out.note_on(0, note_t + (chord_t[p % len(chord_t)]), 0)
    # midi_out.note_on(0, 60 + (minor[p % 3]), 0)
    if id != player_id: // stop AFTER note-off
        return
    var vel = int(velocity.value())
    midi_out.note_on(0, note_t + (chord_t[p % len(chord_t)]), vel)
    # midi_out.note_on(0, 60 + (minor[p % 3]), vel)
    p = p + 1
    sched_cause(1, nil, 'activity', id, p, note, chord)

def start(rest ignore)
    sched_cause(1, nil, 'activity', player_id, 0, menu2.value(), menu1.value())
    sched_cause(1, nil, 'activity', player_id, 0, menu4.value(), menu3.value())


def stop(rest ignore)
    player_id = player_id + 1

Button(0, "Start", 5, 5, 50, 20).method = 'start'
Button(0, "Stop", 60, 5, 50, 20).method = 'stop'


def set_period(obj, x):
    display "set_period", obj, x
    sched_select(vtsched)
    sched_set_period(x)

Statictext(WXS_DEFAULT_WINDOW, "Please select first chord: ", 5, 80, 400, 20)
Statictext(WXS_DEFAULT_WINDOW, "Please select 2nd chord: ", 5, 180, 400, 20)

# Creates the slider to adjust period
period = Labeled_slider(0, "Period", 5, 30, 250, 20,
                        70, 0.05, 5, 0.2, 'exponential')
period.method = 'set_period'

# Creates the sllider to adjust velocity
velocity = Labeled_slider(0, "Velocity", 5, 55, 250, 20,
                          70, 1, 127, 100, 'linear')

# slider3 = Labeled_slider(0, "slider3", 5, 80, 250, 20,
#                           70, 1, 127, 100, 'linear')

# Creates the first drop down menu for the first chord
menu1 = Choice(default_window, 5, 100, 100, 30)
for i = 0 to len(CHORDS)
    menu1.append(CHORDS.keys()[i])
#creates the first choice of notes for the first chord
menu2 = Choice(default_window, 5, 140, 100, 30)
for i = 0 to len(NOTES)
    menu2.append(NOTES.keys()[i])
# creates the 2nd drop down menu for the 2nd chord
menu3 = Choice(default_window, 5, 200, 100, 30)
for i = 0 to len(CHORDS)
    menu3.append(CHORDS.keys()[i])
# creates the 2nd choice of notes for the 2nd chord
menu4 = Choice(default_window, 5, 240, 100, 30)
for i = 0 to len(NOTES)
    menu4.append(NOTES.keys()[i])



sched_init() // creates vtsched and rtsched
prefs = Prefs("./prefs.txt")
midi_devices = Midi_devices(prefs, open_later = true) 
success = midi_devices.open_midi(latency = 10, device = 'midi_out_device') 
if not success 
    print "PLEASE SELECT A VALID OUTPUT DEVICE AND RESTART THIS PROGRAM"
else 
    sched_select(vtsched)
    sched_set_period(0.2)
    # sched_cause(real_delay(5), nil, 'activity', player_id, 0)
